<?xml version="1.0"?>
<ruleset name="cierra_default">

    <description>Cierra laravel syle guide</description>
    <config name="installed_paths" value="../../slevomat/coding-standard"/><!-- relative path from PHPCS source location -->
    <exclude-pattern>*/tests/*</exclude-pattern>
    <exclude-pattern>*config/*.php</exclude-pattern>
    <rule ref="PSR2"/>


    <!-- Forbid some functions -->
    <rule ref="Generic.PHP.ForbiddenFunctions">
        <properties>
            <property name="forbiddenFunctions"
                      type="array"
                      value="dd=>null"/>
        </properties>
    </rule>

    <!-- Exceptions: -->
    <!-- PHP code MUST use the long <?php ?> tags or the short-echo <?= ?> tags; it MUST NOT use the other tag variations. -->
    <rule ref="Generic.PHP.DisallowShortOpenTag.EchoFound">
        <exclude-pattern>*.blade.php</exclude-pattern>
    </rule>
    <rule ref="SlevomatCodingStandard.Variables.UnusedVariable.UnusedVariable">
        <exclude-pattern>*.blade.php</exclude-pattern>
    </rule>
    <!-- Method names MUST be declared in camelCase(). -->
    <rule ref="PSR1.Methods.CamelCapsMethodName.NotCamelCaps">
        <properties>
            <property name="strict" value="false"/>
        </properties>
        <!-- removed from tests due to test_<name> and <name>_dataProvider convention -->
        <exclude-pattern>*Test.php</exclude-pattern>
    </rule>
    <!-- Method names MUST be declared in camelCase(). -->
    <rule ref="PSR1.Classes.ClassDeclaration.MultipleClasses">
        <!-- removed from tests because we sometimes need to have actual "test" classes -->
        <exclude-pattern>*Test.php</exclude-pattern>
    </rule>
    <!-- End Exceptions -->

    <!-- PHP code MUST use only UTF-8 without BOM. -->
    <rule ref="Generic.Files.ByteOrderMark"/>

    <!-- Check for duplicated class names -->
    <rule ref="Generic.Classes.DuplicateClassName"/>

    <!-- Class constants MUST be declared in all upper case with underscore separators. -->
    <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>

    <!-- The soft limit on line length MUST be 140 characters; automated style checkers MUST warn but MUST NOT error at the soft limit. -->
    <rule ref="Generic.Files.LineLength">
        <properties>
            <property name="lineLimit" value="200"/>
            <property name="absoluteLineLimit" value="250"/>
        </properties>
        <!-- Generated libs have some rather long class names that break this! -->
        <exclude-pattern>*.blade.php</exclude-pattern>
    </rule>

    <rule ref="Generic.WhiteSpace.ScopeIndent.IncorrectExact">
        <!-- mixed syntax messes this rule up -->
        <exclude-pattern>*.blade.php</exclude-pattern>
    </rule>

    <!-- catch{} must explain why it's empty via comment-->
    <rule ref="Squiz.Commenting.EmptyCatchComment"/>

    <!--Disallow array() syntax in favor of []-->
    <rule ref="Generic.Arrays.DisallowLongArraySyntax"/>
    <!-- enforce that the last element of a multi line array ends with a , -->
    <rule ref="Squiz.Arrays.ArrayDeclaration.NoComma"/>

    <!-- end of a multi line array should be on a new line -->
    <rule ref="Squiz.Arrays.ArrayDeclaration.CloseBraceNewLine"/>

    <rule ref="Squiz.Arrays.ArrayDeclaration.ValueNoNewline"/>
    <rule ref="Squiz.Arrays.ArrayDeclaration.IndexNoNewline"/>
    <rule ref="Squiz.Arrays.ArrayDeclaration.FirstValueNoNewline"/>
    <rule ref="Squiz.Arrays.ArrayDeclaration.FirstIndexNoNewline"/>

    <rule ref="Generic.Commenting.DocComment">
        <exclude name="Generic.Commenting.DocComment.NonParamGroup"/>
        <exclude name="Generic.Commenting.DocComment.TagValueIndent"/>
        <exclude name="Generic.Commenting.DocComment.MissingShort"/>
        <exclude name="Generic.Commenting.DocComment.ParamNotFirst"/>
        <exclude name="Generic.Commenting.DocComment.LongNotCapital"/>
        <exclude name="Generic.Commenting.DocComment.ShortNotCapital"/>
    </rule>

    <rule ref="SlevomatCodingStandard.Commenting.UselessFunctionDocComment" phpcs-only="true">
        <properties>
            <property name="enableEachParameterAndReturnInspection" value="true"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.PropertyTypeHint" phpcs-only="true">
        <exclude name="SlevomatCodingStandard.TypeHints.PropertyTypeHint.MissingTraversableTypeHintSpecification"/>
        <exclude name="SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingAnyTypeHint"/>
        <exclude name="SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingNativeTypeHint"/>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHint" phpcs-only="true">
        <exclude name="SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingTraversableTypeHintSpecification"/>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHint" phpcs-only="true">
        <exclude name="SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingTraversableTypeHintSpecification"/>
        <exclude name="SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingAnyTypeHint"/>
        <exclude name="SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingNativeTypeHint"/>
    </rule>

    <rule ref="SlevomatCodingStandard.Namespaces.UseSpacing"/>
    <rule ref="SlevomatCodingStandard.TypeHints.UselessConstantTypeHint"/>

    <rule ref="SlevomatCodingStandard.Arrays.DisallowImplicitArrayCreation"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.AssignmentInCondition"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireNullCoalesceOperator"/>
    <rule ref="SlevomatCodingStandard.Operators.RequireCombinedAssignmentOperator"/>
    <rule ref="SlevomatCodingStandard.Classes.UnusedPrivateElements"/>
    <rule ref="SlevomatCodingStandard.Functions.UnusedInheritedVariablePassedToClosure"/>

    <rule ref="SlevomatCodingStandard.Functions.UselessParameterDefaultValue"/>
    <rule ref="SlevomatCodingStandard.Namespaces.UnusedUses">
        <properties>
            <!--Important for blade templates-->
            <property name="searchAnnotations" value="true"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Namespaces.UseFromSameNamespace"/>
    <rule ref="SlevomatCodingStandard.Namespaces.UselessAlias"/>
    <rule ref="SlevomatCodingStandard.PHP.UselessSemicolon"/>
    <rule ref="SlevomatCodingStandard.Variables.DuplicateAssignmentToVariable"/>
    <rule ref="SlevomatCodingStandard.Variables.UnusedVariable">
        <properties>
            <property name="ignoreUnusedValuesWhenOnlyKeysAreUsedInForeach" value="true"/>
        </properties>
    </rule>
    <!--<rule ref="SlevomatCodingStandard.Variables.UselessVariable"/>-->
    <rule ref="SlevomatCodingStandard.Exceptions.DeadCatch"/>
    <rule ref="SlevomatCodingStandard.Classes.TraitUseDeclaration"/>
    <rule ref="SlevomatCodingStandard.Classes.TraitUseSpacing">
        <properties>
            <property name="linesCountBeforeFirstUse" value="0"/>
            <property name="linesCountAfterLastUseWhenLastInClass" value="0"/>
        </properties>
    </rule>


    <rule ref="SlevomatCodingStandard.ControlStructures.NewWithParentheses"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.DisallowYodaComparison"/>
    <rule ref="SlevomatCodingStandard.Namespaces.AlphabeticallySortedUses"/>
    <rule ref="SlevomatCodingStandard.Namespaces.RequireOneNamespaceInFile"/>
    <rule ref="SlevomatCodingStandard.Namespaces.NamespaceDeclaration"/>
    <rule ref="SlevomatCodingStandard.Namespaces.NamespaceSpacing"/>
    <rule ref="SlevomatCodingStandard.TypeHints.LongTypeHints"/>
    <rule ref="SlevomatCodingStandard.TypeHints.NullTypeHintOnLastPosition"/>
    <rule ref="SlevomatCodingStandard.PHP.ShortList"/>
    <rule ref="SlevomatCodingStandard.PHP.TypeCast"/>
    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing"/>
    <rule ref="SlevomatCodingStandard.TypeHints.NullableTypeForNullDefaultValue"/>
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHintSpacing"/>
    <rule ref="SlevomatCodingStandard.Namespaces.DisallowGroupUse"/>
    <rule ref="SlevomatCodingStandard.Namespaces.ReferenceUsedNamesOnly">
        <properties>
            <property name="allowFullyQualifiedGlobalClasses" value="true"/>
            <property name="allowFullyQualifiedGlobalFunctions" value="true"/>
            <property name="allowFullyQualifiedGlobalConstants" value="true"/>
            <property name="allowFallbackGlobalFunctions" value="true"/>
            <property name="allowFallbackGlobalConstants" value="true"/>
        </properties>
    </rule>

    <rule ref="SlevomatCodingStandard.Namespaces.UseDoesNotStartWithBackslash"/>

    <rule ref="SlevomatCodingStandard.Commenting.EmptyComment"/>
    <rule ref="SlevomatCodingStandard.Commenting.DisallowOneLinePropertyDocComment"/>
    <rule ref="SlevomatCodingStandard.Commenting.UselessInheritDocComment"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.UselessIfConditionWithReturn"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.UselessTernaryOperator"/>
    <rule ref="SlevomatCodingStandard.TypeHints.DeclareStrictTypes"/>

    <rule ref="SlevomatCodingStandard.Whitespaces.DuplicateSpaces" />
    <rule ref="SlevomatCodingStandard.Classes.ClassMemberSpacing" />
    <rule ref="SlevomatCodingStandard.Classes.MethodSpacing" />
    <rule ref="SlevomatCodingStandard.Classes.PropertySpacing" />
</ruleset>